import os
import datetime
import time
import logging
import asyncio
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from tinkoff.invest import Client, CandleInterval, SecurityTradingStatus
from io import BytesIO

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "your_token_invest_api"
TELEGRAM_TOKEN = "your_noken_telegram_bot"
TELEGRAM_CHAT_ID = "your_id_chat"
FIGI = "BBG004730ZJ9"  # FIGI –∞–∫—Ü–∏–∏ –í–¢–ë
TRADE_INTERVAL = CandleInterval.CANDLE_INTERVAL_1_MIN
SHORT_MA_PERIOD = 5
LONG_MA_PERIOD = 20
HISTORY_DAYS = 1
SIGNAL_CONFIRMATION = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
current_position = 0  # 0 - –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏, 1 - –∫—É–ø–ª–µ–Ω–æ
entry_price = 0.0
entry_time = None
signals_history = []
bot_instance = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('VTBSignalSystem')

# ================== Telegram Bot Functions ================== #
async def telegram_send_message(text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        await bot_instance.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"Telegram: {text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {str(e)}")

async def telegram_send_photo(photo, caption=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
    try:
        await bot_instance.send_photo(
            chat_id=TELEGRAM_CHAT_ID,
            photo=photo,
            caption=caption,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")

def create_signal_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data='confirm_buy')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data='cancel_signal')],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data='show_chart')]
    ]
    if current_position == 1:
        keyboard[0][0] = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", callback_data='confirm_sell')
        keyboard.append([InlineKeyboardButton("‚ö° –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞", callback_data='emergency_sell')])
    
    return InlineKeyboardMarkup(keyboard)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üöÄ –°–∏—Å—Ç–µ–º–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∞–∫—Ü–∏—è–º–∏ –í–¢–ë –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/chart - —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫\n"
        "/position - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π"
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
    status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if len(signals_history) > 0 else "üü° –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
    position_status = "–ö—É–ø–ª–µ–Ω–æ" if current_position == 1 else "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏"
    
    message = (
        f"üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: {status}\n"
        f"‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: {position_status}\n"
        f"‚Ä¢ –ê–∫—Ü–∏—è: –í–¢–ë\n"
        f"‚Ä¢ FIGI: `{FIGI}`\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals_history)}"
    )
    
    if current_position == 1:
        current_price = await get_current_price()
        profit = (current_price - entry_price) / entry_price * 100
        hold_time = (datetime.datetime.now() - entry_time).total_seconds() / 60
        
        message += (
            f"\n\nüí∞ *–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è*\n"
            f"‚Ä¢ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f} RUB\n"
            f"‚Ä¢ –í—Ä–µ–º—è –≤—Ö–æ–¥–∞: {entry_time.strftime('%Y-%m-%d %H:%M')}\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} RUB\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {profit:+.2f}%\n"
            f"‚Ä¢ –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {hold_time:.1f} –º–∏–Ω"
        )
    
    await update.message.reply_text(message, parse_mode='Markdown')

async def chart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /chart"""
    try:
        with Client(TOKEN) as client:
            df = get_historical_candles(client, HISTORY_DAYS)
            if df.empty:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
                return
            
            fig = generate_chart(df)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
            buf = BytesIO()
            fig.savefig(buf, format='png', dpi=100)
            buf.seek(0)
            
            await update.message.reply_photo(
                photo=buf,
                caption="üìà –¢–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –í–¢–ë —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏",
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}", exc_info=True)
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

async def position_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /position"""
    keyboard = []
    
    if current_position == 0:
        keyboard.append([InlineKeyboardButton("üìà –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É", callback_data='force_buy')])
    else:
        keyboard.append([InlineKeyboardButton("üìâ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", callback_data='force_sell')])
        keyboard.append([InlineKeyboardButton("üî• –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞", callback_data='emergency_sell')])
    
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data='refresh_status')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    global current_position, entry_price, entry_time
    
    if query.data == 'confirm_buy' and current_position == 0:
        current_price = await get_current_price()
        current_position = 1
        entry_price = current_price
        entry_time = datetime.datetime.now()
        
        await query.edit_message_text(
            f"‚úÖ *–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!*\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –í–¢–ë\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {current_price:.2f} RUB\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {entry_time.strftime('%Y-%m-%d %H:%M')}\n"
            f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É
        stop_loss_price = current_price * 0.97
        take_profit_price = current_price * 1.03
        
        await telegram_send_message(
            f"‚ö° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏*\n"
            f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–∏:\n"
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: `{stop_loss_price:.2f} RUB` (-3%)\n"
            f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: `{take_profit_price:.2f} RUB` (+3%)\n"
            f"\n"
            f"–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é: /position"
        )
    
    elif query.data == 'confirm_sell' and current_position == 1:
        current_price = await get_current_price()
        profit = (current_price - entry_price) / entry_price * 100
        hold_time = (datetime.datetime.now() - entry_time).total_seconds() / 60
        
        current_position = 0
        entry_price = 0.0
        
        await query.edit_message_text(
            f"‚úÖ *–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞!*\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –í–¢–ë\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {current_price:.2f} RUB\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {profit:+.2f}%\n"
            f"‚Ä¢ –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {hold_time:.1f} –º–∏–Ω",
            parse_mode='Markdown'
        )
    
    elif query.data == 'cancel_signal':
        await query.edit_message_text("‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω–µ–Ω")
    
    elif query.data == 'show_chart':
        try:
            with Client(TOKEN) as client:
                df = get_historical_candles(client, HISTORY_DAYS)
                if df.empty:
                    await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
                    return
                
                fig = generate_chart(df)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
                buf = BytesIO()
                fig.savefig(buf, format='png', dpi=100)
                buf.seek(0)
                
                await query.message.reply_photo(
                    photo=buf,
                    caption="üìà –¢–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –í–¢–ë —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏",
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}", exc_info=True)
            await query.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
    
    elif query.data == 'force_buy':
        current_price = await get_current_price()
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data='confirm_buy')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_signal')]
        ])
        
        await query.edit_message_text(
            f"‚ö†Ô∏è *–†—É—á–Ω–æ–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É*\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} RUB\n"
            f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –í–¢–ë\n"
            f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif query.data == 'force_sell':
        current_price = await get_current_price()
        profit = (current_price - entry_price) / entry_price * 100
        
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", callback_data='confirm_sell')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_signal')]
        ])
        
        await query.edit_message_text(
            f"‚ö†Ô∏è *–†—É—á–Ω–æ–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É*\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} RUB\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {profit:+.2f}%\n"
            f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞ –í–¢–ë\n"
            f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif query.data == 'emergency_sell' and current_position == 1:
        current_price = await get_current_price()
        profit = (current_price - entry_price) / entry_price * 100
        
        current_position = 0
        entry_price = 0.0
        
        await query.edit_message_text(
            f"üö® *–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞!*\n"
            f"‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {current_price:.2f} RUB\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {profit:+.2f}%",
            parse_mode='Markdown'
        )
    
    elif query.data == 'refresh_status':
        await status_command(update, context)

# ================== Trading Signal Functions ================== #
def get_historical_candles(client, days):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    now_time = datetime.datetime.utcnow()
    from_time = now_time - datetime.timedelta(days=days)
    
    candles = client.get_all_candles(
        figi=FIGI,
        from_=from_time,
        to=now_time,
        interval=TRADE_INTERVAL
    )
    
    data = []
    for c in candles:
        data.append({
            'time': c.time,
            'open': c.open.units + c.open.nano / 1e9,
            'close': c.close.units + c.close.nano / 1e9,
            'high': c.high.units + c.high.nano / 1e9,
            'low': c.low.units + c.low.nano / 1e9,
            'volume': c.volume
        })
    
    df = pd.DataFrame(data)
    if df.empty:
        return df
        
    df['time'] = pd.to_datetime(df['time'])
    df = df.set_index('time')
    return df

def calculate_indicators(df):
    """–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    if len(df) < LONG_MA_PERIOD:
        return df
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
    df['short_ma'] = df['close'].rolling(SHORT_MA_PERIOD).mean()
    df['long_ma'] = df['close'].rolling(LONG_MA_PERIOD).mean()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    df['signal'] = 0
    df.loc[df['short_ma'] > df['long_ma'], 'signal'] = 1  # –ü–æ–∫—É–ø–∫–∞
    df.loc[df['short_ma'] < df['long_ma'], 'signal'] = -1  # –ü—Ä–æ–¥–∞–∂–∞
    
    return df

async def get_current_price():
    """–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    try:
        with Client(TOKEN) as client:
            last_price = client.market_data.get_last_prices(figi=[FIGI]).last_prices[0]
            return last_price.price.units + last_price.price.nano / 1e9
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {str(e)}")
        return 0.0

def generate_chart(df):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    plt.figure(figsize=(12, 8))
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
    plt.subplot(2, 1, 1)
    plt.plot(df.index, df['close'], label='–¶–µ–Ω–∞ –í–¢–ë', color='blue')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
    if 'short_ma' in df.columns:
        plt.plot(df.index, df['short_ma'], label=f'MA {SHORT_MA_PERIOD}', color='orange', linestyle='--')
    
    if 'long_ma' in df.columns:
        plt.plot(df.index, df['long_ma'], label=f'MA {LONG_MA_PERIOD}', color='green', linestyle='-.')
    
    # –ü–æ–º–µ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    if 'signal' in df.columns:
        buy_signals = df[df['signal'] == 1]
        sell_signals = df[df['signal'] == -1]
        
        if not buy_signals.empty:
            plt.scatter(buy_signals.index, buy_signals['close'], marker='^', color='g', s=100, label='–°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏')
        if not sell_signals.empty:
            plt.scatter(sell_signals.index, sell_signals['close'], marker='v', color='r', s=100, label='–°–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏')
    
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –í–¢–ë —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏')
    plt.ylabel('–¶–µ–Ω–∞ (RUB)')
    plt.legend()
    plt.grid(True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
    plt.gca().xaxis.set_major_locator(mdates.HourLocator(interval=1))
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–∞
    plt.subplot(2, 1, 2)
    plt.bar(df.index, df['volume'], color='blue', alpha=0.3)
    plt.title('–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤')
    plt.ylabel('–û–±—ä–µ–º')
    plt.grid(True)
    
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
    plt.gca().xaxis.set_major_locator(mdates.HourLocator(interval=1))
    
    plt.tight_layout()
    return plt

def analyze_signals():
    """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"""
    global signals_history
    
    if len(signals_history) < SIGNAL_CONFIRMATION:
        return None
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    last_signals = signals_history[-SIGNAL_CONFIRMATION:]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
    if all(s == 1 for s in last_signals):
        return "BUY"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏
    if all(s == -1 for s in last_signals):
        return "SELL"
    
    return None

async def send_signal_notification(signal_type, current_price, df):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ"""
    if signal_type == "BUY":
        action = "–ü–û–ö–£–ü–ö–ê"
        reason = "—É—Å—Ç–æ–π—á–∏–≤—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
        recommendation = (
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2-5 –º–∏–Ω—É—Ç.\n"
            "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: –Ω–∞ 0.1-0.3% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π."
        )
    else:
        action = "–ü–†–û–î–ê–ñ–ê"
        reason = "—É—Å—Ç–æ–π—á–∏–≤—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
        recommendation = (
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2-5 –º–∏–Ω—É—Ç.\n"
            "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: –Ω–∞ 0.1-0.3% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π."
        )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    fig = generate_chart(df)
    buf = BytesIO()
    fig.savefig(buf, format='png', dpi=100)
    buf.seek(0)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = (
        f"üö® *–°–ò–ì–ù–ê–õ {action} –í–¢–ë*\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{current_price:.2f} RUB`\n"
        f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {SIGNAL_CONFIRMATION}\n\n"
        f"üìå *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*\n"
        f"{recommendation}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    await telegram_send_photo(buf, caption=message)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    reply_markup = create_signal_keyboard()
    await telegram_send_message("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup)

async def check_position_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–∏—Å–∫–æ–≤"""
    if current_position != 1:
        return
    
    current_price = await get_current_price()
    profit = (current_price - entry_price) / entry_price * 100
    hold_time = (datetime.datetime.now() - entry_time).total_seconds() / 60
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å
    if profit < -5:
        await telegram_send_message(
            f"üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–ë–´–¢–û–ö!*\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{current_price:.2f} RUB`\n"
            f"‚Ä¢ –£–±—ã—Ç–æ–∫: `{profit:.2f}%`\n"
            f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞!",
            reply_markup=create_signal_keyboard()
        )
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ
    elif profit < -3:
        await telegram_send_message(
            f"‚ö†Ô∏è *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –°–¢–û–ü-–õ–û–°–°–ï*\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{current_price:.2f} RUB`\n"
            f"‚Ä¢ –£–±—ã—Ç–æ–∫: `{profit:.2f}%`\n"
            f"‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏"
        )
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–µ
    elif profit > 5:
        await telegram_send_message(
            f"‚ö†Ô∏è *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –¢–ï–ô–ö-–ü–†–û–§–ò–¢–ï*\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{current_price:.2f} RUB`\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: `{profit:.2f}%`\n"
            f"‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏",
            reply_markup=create_signal_keyboard()
        )
    # –°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω)
    elif hold_time > 30 and int(hold_time) % 30 == 0:
        await telegram_send_message(
            f"‚ÑπÔ∏è *–°–¢–ê–¢–£–° –ü–û–ó–ò–¶–ò–ò*\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{current_price:.2f} RUB`\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: `{profit:.2f}%`\n"
            f"‚Ä¢ –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: `{hold_time:.1f} –º–∏–Ω`"
        )

# ================== Main Trading Loop ================== #
async def signal_monitoring():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    global signals_history, bot_instance
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('status', status_command))
    application.add_handler(CommandHandler('chart', chart_command))
    application.add_handler(CommandHandler('position', position_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    bot_instance = application.bot
    await telegram_send_message("üöÄ –°–∏—Å—Ç–µ–º–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –í–¢–ë –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        while True:
            try:
                with Client(TOKEN) as client:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    df = get_historical_candles(client, HISTORY_DAYS)
                    if df.empty or len(df) < max(SHORT_MA_PERIOD, LONG_MA_PERIOD):
                        await asyncio.sleep(30)
                        continue
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    df = calculate_indicators(df)
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    last_signal = df.iloc[-1]['signal']
                    current_price = df.iloc[-1]['close']
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    signals_history.append(last_signal)
                    
                    # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
                    decision = analyze_signals()
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–µ—à–µ–Ω–∏—è
                    if decision:
                        await send_signal_notification(decision, current_price, df)
                        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
                        signals_history = []
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                    await check_position_health()
                    
                    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
                    await asyncio.sleep(60)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}", exc_info=True)
                await asyncio.sleep(120)
                
    except KeyboardInterrupt:
        await telegram_send_message("üõë –°–∏—Å—Ç–µ–º–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é")
    finally:
        await application.stop()

if __name__ == "__main__":
    asyncio.run(signal_monitoring())
